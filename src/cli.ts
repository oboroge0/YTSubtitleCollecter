#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import ora from 'ora';
import { SubtitleDownloader } from './services/subtitleDownloader.js';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { validateYouTubeUrl, validateLanguageCode, validateFormat, validateBatchFile } from './utils/validation.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const packageJson = JSON.parse(
  readFileSync(join(__dirname, '..', 'package.json'), 'utf-8')
);

const program = new Command();

program
  .name('yt-subtitle')
  .description('Download and convert YouTube subtitles to text files')
  .version(packageJson.version);

program
  .command('download <url>')
  .description('Download subtitles from a YouTube video')
  .option('-l, --language <lang>', 'Subtitle language code (e.g., en, ja, ko)', 'en')
  .option('-f, --format <format>', 'Output format (txt, srt, vtt, json)', 'txt')
  .option('-o, --output <dir>', 'Output directory', './downloads')
  .option('-a, --auto', 'Download auto-generated subtitles', false)
  .option('--list', 'List available subtitles without downloading', false)
  .action(async (url, options) => {
    const spinner = ora('Initializing...').start();
    const downloader = new SubtitleDownloader();

    try {
      if (!validateYouTubeUrl(url)) {
        throw new Error('Invalid YouTube URL. Please provide a valid YouTube video URL.');
      }

      if (options.language && !validateLanguageCode(options.language)) {
        throw new Error(`Invalid language code: ${options.language}. Use ISO 639-1 format (e.g., en, ja, ko).`);
      }

      if (options.format && !validateFormat(options.format)) {
        throw new Error(`Invalid format: ${options.format}. Valid formats are: txt, srt, vtt, json.`);
      }
      spinner.text = 'Checking dependencies...';
      await downloader.checkDependencies();

      if (options.list) {
        spinner.text = 'Fetching available subtitles...';
        const subtitles = await downloader.downloadSubtitle(url, {
          listOnly: true
        });
        spinner.succeed('Available subtitles:');
        (subtitles as string[]).forEach(lang => {
          console.log(chalk.green(`  • ${lang}`));
        });
        return;
      }

      spinner.text = `Downloading ${options.language} subtitles...`;
      const result = await downloader.downloadSubtitle(url, {
        language: options.language,
        format: options.format,
        outputDir: options.output,
        autoGenerated: options.auto
      });

      spinner.succeed(chalk.green(`Subtitle downloaded successfully!`));
      console.log(chalk.blue(`Output: ${result}`));
    } catch (error) {
      spinner.fail(chalk.red('Failed to download subtitle'));
      console.error(chalk.red(`Error: ${(error as Error).message}`));
      process.exit(1);
    }
  });

program
  .command('batch <file>')
  .description('Download subtitles from multiple YouTube videos listed in a file')
  .option('-l, --language <lang>', 'Subtitle language code', 'en')
  .option('-f, --format <format>', 'Output format (txt, srt, vtt, json)', 'txt')
  .option('-o, --output <dir>', 'Output directory', './downloads')
  .option('-a, --auto', 'Download auto-generated subtitles', false)
  .action(async (file, options) => {
    const spinner = ora('Reading URLs from file...').start();
    const downloader = new SubtitleDownloader();

    try {
      const urls = readFileSync(file, 'utf-8')
        .split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'));

      if (urls.length === 0) {
        spinner.fail('No URLs found in file');
        return;
      }

      const { valid, invalid } = validateBatchFile(urls);
      
      if (invalid.length > 0) {
        spinner.warn(`Found ${invalid.length} invalid URLs`);
        invalid.forEach(url => {
          console.log(chalk.yellow(`  ⚠ Invalid URL: ${url}`));
        });
      }

      if (valid.length === 0) {
        spinner.fail('No valid YouTube URLs found in file');
        return;
      }

      spinner.text = `Processing ${valid.length} videos...`;
      const results = await downloader.batchDownload(valid, {
        language: options.language,
        format: options.format,
        outputDir: options.output,
        autoGenerated: options.auto
      });

      spinner.succeed('Batch download completed!');
      
      let successCount = 0;
      let failCount = 0;

      results.forEach((result, url) => {
        if (result instanceof Error) {
          failCount++;
          console.log(chalk.red(`✗ ${url}: ${result.message}`));
        } else {
          successCount++;
          console.log(chalk.green(`✓ ${url}`));
        }
      });

      console.log(chalk.blue(`\nSummary: ${successCount} succeeded, ${failCount} failed`));
    } catch (error) {
      spinner.fail(chalk.red('Batch download failed'));
      console.error(chalk.red(`Error: ${(error as Error).message}`));
      process.exit(1);
    }
  });

program
  .command('check')
  .description('Check if yt-dlp is installed')
  .action(async () => {
    const spinner = ora('Checking yt-dlp installation...').start();
    const downloader = new SubtitleDownloader();

    try {
      await downloader.checkDependencies();
      spinner.succeed(chalk.green('yt-dlp is installed and ready!'));
    } catch (error) {
      spinner.fail(chalk.red('yt-dlp is not installed'));
      console.log(chalk.yellow('\nTo install yt-dlp:'));
      console.log(chalk.blue('  pip install yt-dlp'));
      console.log(chalk.blue('  # or'));
      console.log(chalk.blue('  brew install yt-dlp'));
      process.exit(1);
    }
  });

program.parse();